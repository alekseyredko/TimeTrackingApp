// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTrackingApp.Infrastructure;

#nullable disable

namespace TimeTrackingApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TimeTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("EndTrackTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartTrackTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TrackingEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackingEventId");

                    b.ToTable("TimeTracks");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackingEventTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackingEventTypeId");

                    b.ToTable("TrackingEvents");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrackingEventTypes");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TimeTrack", b =>
                {
                    b.HasOne("TimeTrackingApp.Domain.Entities.TrackingEvent", "TrackingEvent")
                        .WithMany("TimeTracks")
                        .HasForeignKey("TrackingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackingEvent");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEvent", b =>
                {
                    b.HasOne("TimeTrackingApp.Domain.Entities.TrackingEventType", "TrackingEventType")
                        .WithMany("TrackingEvents")
                        .HasForeignKey("TrackingEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackingEventType");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEvent", b =>
                {
                    b.Navigation("TimeTracks");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEventType", b =>
                {
                    b.Navigation("TrackingEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
