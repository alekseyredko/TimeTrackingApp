// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTrackingApp.Infrastructure;

#nullable disable

namespace TimeTrackingApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TimeTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("EndTrackTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartTrackTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TrackingEventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackingEventId");

                    b.ToTable("TimeTracks");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTracking")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrackingEvents");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrackingEventTypes");
                });

            modelBuilder.Entity("TrackingEventTrackingEventType", b =>
                {
                    b.Property<Guid>("TrackingEventTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackingEventsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrackingEventTypesId", "TrackingEventsId");

                    b.HasIndex("TrackingEventsId");

                    b.ToTable("TrackingEventTrackingEventType");
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TimeTrack", b =>
                {
                    b.HasOne("TimeTrackingApp.Domain.Entities.TrackingEvent", "TrackingEvent")
                        .WithMany("TimeTracks")
                        .HasForeignKey("TrackingEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackingEvent");
                });

            modelBuilder.Entity("TrackingEventTrackingEventType", b =>
                {
                    b.HasOne("TimeTrackingApp.Domain.Entities.TrackingEventType", null)
                        .WithMany()
                        .HasForeignKey("TrackingEventTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTrackingApp.Domain.Entities.TrackingEvent", null)
                        .WithMany()
                        .HasForeignKey("TrackingEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeTrackingApp.Domain.Entities.TrackingEvent", b =>
                {
                    b.Navigation("TimeTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
