@using MediatR;
@using TimeTrackingApp.Application.Services.Interfaces;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Commands.TrackingEventTypes;
@using TimeTrackingApp.Infrastructure.Models;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEventTypes;
@using TimeTrackingApp.Models;

<h4>TrackingEventTypeComponent</h4>

<TrackingEventTypeListComponent 
    TrackingEventTypes="_trackingEventTypes"    
    EntityIdChanged="async id => await OnDeleteAsync(id)"    
    AddTrackingEventTypeModelChanged="OnAddAsync"/>

@code {
    private List<TrackingEventTypeDto> _trackingEventTypes;    

    [Inject]
    private IMediator _mediator { get; set; }

    [Inject]
    private IHostApplicationLifetime _applicationLifetime { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _trackingEventTypes = (await _mediator.Send<IReadOnlyCollection<TrackingEventTypeDto>>(new TrackingEventTypesQuery(), CancellationToken.None)).ToList();
            StateHasChanged();
        }
    }

    private async Task OnAddAsync(AddTrackingEventTypeModel addTrackingEventTypeModel)
    {
        CreateTrackingEventTypeCommand createTrackingEventTypeCommand = new CreateTrackingEventTypeCommand { Id = Guid.NewGuid(), Description = addTrackingEventTypeModel.Description, EventType = addTrackingEventTypeModel.EventType };

        TrackingEventTypeDto trackingEventTypeDto = await _mediator.Send<TrackingEventTypeDto>(createTrackingEventTypeCommand, CancellationToken.None);

        _trackingEventTypes.Add(trackingEventTypeDto);
    }

    private async Task OnDeleteAsync(Guid id)
    {
        DeleteTrackingEventTypeCommand deleteTrackingEventTypeCommand = new DeleteTrackingEventTypeCommand { Id = id };
        await _mediator.Send(deleteTrackingEventTypeCommand, CancellationToken.None);
        _trackingEventTypes = _trackingEventTypes.Where(x => x.Id != id).ToList();
    }
}
