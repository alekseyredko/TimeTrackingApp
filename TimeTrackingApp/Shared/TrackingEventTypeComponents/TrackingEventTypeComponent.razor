@using TimeTrackingApp.Core.Services.Interfaces;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Models;

<h4>TrackingEventTypeComponent</h4>

<TrackingEventTypeListComponent 
    TrackingEventTypes="_trackingEventTypes"    
    EntityIdChanged="async id => await OnDeleteAsync(id)"    
    AddTrackingEventTypeModelChanged="OnAddAsync"/>

@code {
    private List<TrackingEventType> _trackingEventTypes;

    private AddTrackingEventTypeModel _addTrackingEventTypeModel = new AddTrackingEventTypeModel();

    [Inject]
    private ITimeTrackingService _timeTrackingService { get; set; }

    [Inject]
    private IHostApplicationLifetime _applicationLifetime { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (_trackingEventTypes == null)
        {
            _trackingEventTypes = (await _timeTrackingService.GetAllTrackingEventTypes(_applicationLifetime.ApplicationStopping)).ToList();
        }

        await base.OnInitializedAsync();
    }

    private async Task OnAddAsync(AddTrackingEventTypeModel addTrackingEventTypeModel)
    {
        TrackingEventType trackingEventType = new TrackingEventType
            {
                EventType = addTrackingEventTypeModel.EventType,
                Description = addTrackingEventTypeModel.Description,
                TrackingEvents = new List<TrackingEvent>()
            };
        TrackingEventType newTrackingEventType = await _timeTrackingService.AddTrackingEventTypeAsync(trackingEventType, _applicationLifetime.ApplicationStopping);
        _trackingEventTypes.Add(newTrackingEventType);
    }

    private async Task OnDeleteAsync(int id)
    {
        await _timeTrackingService.DeleteTrackingEventTypeAsync(id, _applicationLifetime.ApplicationStopping);
        _trackingEventTypes.Remove(_trackingEventTypes.First(x => x.Id == id));
    }
}
