@using MediatR;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Commands.TrackingEventTypes;
@using TimeTrackingApp.Infrastructure.Models;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEventTypes;
@using TimeTrackingApp.Models;

<h4>TrackingEventTypeComponent</h4>

<TrackingEventTypeListComponent 
    TrackingEventTypes="TrackingEventTypes"                                
    EntityIdChanged="async id => await OnDeleteAsync(id)"    
    AddTrackingEventTypeModelChanged="OnAddAsync"/>

@code {
    [Inject]
    private IMediator _mediator { get; set; }

    [Inject]
    private IHostApplicationLifetime _applicationLifetime { get; set; }    

    [CascadingParameter(Name = "TrackingEventTypes")]
    protected List<TrackingEventTypeDto> TrackingEventTypes { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    private async Task OnAddAsync(AddTrackingEventTypeModel addTrackingEventTypeModel)
    {
        CreateTrackingEventTypeCommand createTrackingEventTypeCommand = new CreateTrackingEventTypeCommand { Id = Guid.NewGuid(), Description = addTrackingEventTypeModel.Description, EventType = addTrackingEventTypeModel.EventType };
        TrackingEventTypeDto trackingEventTypeDto = await _mediator.Send<TrackingEventTypeDto>(createTrackingEventTypeCommand, CancellationToken.None);
        TrackingEventTypes.Add(trackingEventTypeDto);

        await OnStateHasChanged.InvokeAsync();
    }

    private async Task OnDeleteAsync(Guid id)
    {
        DeleteTrackingEventTypeCommand deleteTrackingEventTypeCommand = new DeleteTrackingEventTypeCommand { Id = id };
        await _mediator.Send(deleteTrackingEventTypeCommand, CancellationToken.None);

        TrackingEventTypeDto trackingEventTypeDto = TrackingEventTypes.First(x => x.Id == id);
        TrackingEventTypes.Remove(trackingEventTypeDto);
               
        await OnStateHasChanged.InvokeAsync();
    }
}