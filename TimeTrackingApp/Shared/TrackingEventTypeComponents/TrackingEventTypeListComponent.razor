@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Models;

@if (TrackingEventTypes == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <div class="accordion" id="trackingEventTypes">
        @for (int i = 0; i < TrackingEventTypes.Count; i++)
        {
            int trackingEventTypeNumber = i;
            <div class="accordion-item" @key="TrackingEventTypes[i]">
                <h2 class="accordion-header" id="@($"headingTrackingEventType{i}")">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@($"collapseTrackingEventType{i}")" aria-expanded="true" aria-controls="@($"collapseTrackingEventType{i}")">
                        @TrackingEventTypes[i].EventType
                    </button>
                </h2>
                <div id="@($"collapseTrackingEventType{i}")" class="accordion-collapse collapse" aria-labelledby="@($"headingTrackingEventType{i}")" data-bs-parent="#trackingEventTypes">
                    <div class="accordion-body">
                        <div class="row">
                            <strong class="col">@TrackingEventTypes[i].Description</strong>
                            <button class="btn btn-danger col" @onclick="async e => await OnDeleteAsync(TrackingEventTypes[trackingEventTypeNumber].Id)">Delete</button>
                        </div>
                        <div class="row d-flex align-content-start flex-wrap gap-1">
                            @foreach (TrackingEvent trackingEvent in TrackingEventTypes[i].TrackingEvents)
                            {
                                <span class="badge rounded border text-bg-light">@trackingEvent.Description</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="container mb-3">
        <h5 class="mb-3">Add new tracking event type here</h5>
        <EditForm Model="@AddTrackingEventTypeModel" OnSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label for="eventType" class="form-label">Event type</label>
            <InputText id="eventType" class="form-control mb-3" 
                @bind-Value="AddTrackingEventTypeModel.EventType"
                DisplayName="Event Type"/>

            <label for="description" class="form-label">Description</label>
            <InputText id="description" class="form-control mb-3" 
                @bind-Value="AddTrackingEventTypeModel.Description"                
                DisplayName="Description"/>

            <button type="submit" class="btn btn-primary mb-3">Submit</button>
        </EditForm>
    </div>
}

@code {    
    public AddTrackingEventTypeModel AddTrackingEventTypeModel { get; set; } = new AddTrackingEventTypeModel();

    [Parameter]
    public EventCallback<AddTrackingEventTypeModel> AddTrackingEventTypeModelChanged{ get; set; }

    [Parameter]
    public List<TrackingEventType> TrackingEventTypes { get; set; }

    [Parameter]
    public EventCallback<Guid> EntityIdChanged { get; set; }

    [Inject]
    public ProtectedLocalStorage ProtectedLocalStorage { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProtectedBrowserStorageResult<string> addTrackingEventModelDescription = await ProtectedLocalStorage.GetAsync<string>(nameof(AddTrackingEventTypeModel.Description));
            if(addTrackingEventModelDescription.Success)
            {
                AddTrackingEventTypeModel.Description = addTrackingEventModelDescription.Value;
            }

            ProtectedBrowserStorageResult<string> addTrackingEventModelEventType = await ProtectedLocalStorage.GetAsync<string>(nameof(AddTrackingEventTypeModel.EventType));
            if (addTrackingEventModelEventType.Success)
            {
                AddTrackingEventTypeModel.EventType = addTrackingEventModelEventType.Value;
            }
            StateHasChanged();
        }        
    }

    private async Task OnDeleteAsync(int id)
    {      
        await EntityIdChanged.InvokeAsync(id);
    }
   
    private async Task HandleSubmit(EditContext editContext)
    {
        await ProtectedLocalStorage.SetAsync(nameof(AddTrackingEventTypeModel.Description), ((AddTrackingEventTypeModel)editContext.Model).Description);
        if (editContext.Validate())
        {                        
            await AddTrackingEventTypeModelChanged.InvokeAsync(AddTrackingEventTypeModel);
            AddTrackingEventTypeModel = new AddTrackingEventTypeModel();
        }
    }    
}
