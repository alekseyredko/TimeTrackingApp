@using Infrastructure.Models
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Commands.TrackingEvents;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEventTypes;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEvents;
@using TimeTrackingApp.Models;
@using MediatR;
<h4>TrackingEventComponent</h4>

<TrackingEventListComponent 
    @bind-TrackingEvents=_trackingEvents 
    @bind-Entity="_trackingEventToDelete"
    EntityDeleted="OnDeleteEntityAsync" />

<AddTrackingEventComponent 
    @bind-TrackingEvent="_trackingEventToAdd" 
    @bind-TrackingEventTypes="_trackingEventTypes"
    TrackingEventAdded="OnAddEntityAsync" />

@code {
    private List<TrackingEventDto> _trackingEvents;
    private List<TrackingEventTypeModel> _trackingEventTypes;
    private TrackingEventDto _trackingEventToDelete;
    private AddTrackingEventModel _trackingEventToAdd = new AddTrackingEventModel();

    [Inject]
    private IMediator _mediator { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _trackingEvents = (await _mediator.Send<IReadOnlyCollection<TrackingEventDto>>(new TrackingEventsQuery(), CancellationToken.None)).ToList();
            _trackingEventTypes = (await _mediator.Send<IReadOnlyCollection<TrackingEventTypeDto>>(new TrackingEventTypesQuery(), CancellationToken.None)).Select(x => new TrackingEventTypeModel { Id = x.Id, Description = x.Description, EventType = x.EventType }).ToList();
            StateHasChanged();
        }
    }

    private async Task OnAddEntityAsync()
    {
        CreateTrackingEventCommand createTrackingEventCommand = new CreateTrackingEventCommand
        {
            Id = Guid.NewGuid(),
            Name = _trackingEventToAdd.Name,
            Description = _trackingEventToAdd.Description,
            TrackingEventTypes = _trackingEventToAdd.EventTypes.Select(x => new TrackingEventTypeDto { Id = x.Id, EventType = x.EventType, Description = x.Description }).ToList()
        };

        TrackingEventDto createdTrackingEvent = await _mediator.Send<TrackingEventDto>(createTrackingEventCommand, CancellationToken.None);
        _trackingEvents.Add(createdTrackingEvent);
    }

    private async Task OnDeleteEntityAsync()
    {
        DeleteTrackingEventCommand deleteTrackingEventCommand = new DeleteTrackingEventCommand { Id = _trackingEventToDelete.Id };
        await _mediator.Send(deleteTrackingEventCommand, CancellationToken.None);
        _trackingEvents.Remove(_trackingEventToDelete);
    }
}