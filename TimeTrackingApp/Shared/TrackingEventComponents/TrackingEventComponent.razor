@using TimeTrackingApp.Core.Services.Interfaces;
@using TimeTrackingApp.Domain.Entities;
<h4>TrackingEventComponent</h4>

<TrackingEventListComponent
    @bind-TrackingEvents=_trackingEvents
    @bind-Entity="_trackingEventToDelete"    
    EntityDeleted="OnDeleteEntityAsync"/>

<AddTrackingEventComponent 
    @bind-TrackingEvent="_trackingEventToAdd"
    @bind-TrackingEventTypes="_trackingEventTypes" 
    TrackingEventAdded="OnAddEntityAsync"/>

@code {
    private List<TrackingEvent> _trackingEvents;
    private List<TrackingEventType> _trackingEventTypes;
    private TrackingEvent _trackingEventToDelete;
    private TrackingEvent _trackingEventToAdd = new TrackingEvent();

    [Inject]
    private ITimeTrackingService _timeTrackingService { get; set; }

    protected override async Task OnInitializedAsync()  
    {
        _trackingEvents = (await _timeTrackingService.GetTrackingEventsAsync(CancellationToken.None)).ToList();
        _trackingEventTypes = (await _timeTrackingService.GetAllTrackingEventTypes(CancellationToken.None)).ToList();
        await base.OnInitializedAsync();
    }

    private async Task OnAddEntityAsync()
    {
        TrackingEvent newTrackingEvent = await _timeTrackingService.AddTrakingEventAsync(_trackingEventToAdd, CancellationToken.None);
        _trackingEvents.Add(newTrackingEvent);
    }

    private async Task OnDeleteEntityAsync()
    {
        await _timeTrackingService.DeleteTrackingEventAsync(_trackingEventToDelete.Id, CancellationToken.None);
        _trackingEvents.Remove(_trackingEventToDelete);
        _trackingEventToDelete = null;
    }
}