@using TimeTrackingApp.Core.Services.Interfaces;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Models;
<h4>TrackingEventComponent</h4>

<TrackingEventListComponent
    @bind-TrackingEvents=_trackingEvents
    @bind-Entity="_trackingEventToDelete"    
    EntityDeleted="OnDeleteEntityAsync"/>

<AddTrackingEventComponent 
    @bind-TrackingEvent="_trackingEventToAdd"
    @bind-TrackingEventTypes="_trackingEventTypes" 
    TrackingEventAdded="OnAddEntityAsync"/>

@code {
    private List<TrackingEvent> _trackingEvents;
    private List<TrackingEventTypeModel> _trackingEventTypes;
    private TrackingEvent _trackingEventToDelete;
    private AddTrackingEventModel _trackingEventToAdd = new AddTrackingEventModel();

    [Inject]
    private ITimeTrackingService _timeTrackingService { get; set; }

    protected override async Task OnInitializedAsync()  
   {
        _trackingEvents = (await _timeTrackingService.GetTrackingEventsAsync(CancellationToken.None)).ToList();
        _trackingEventTypes = (await _timeTrackingService.GetAllTrackingEventTypes(CancellationToken.None)).Select(x => new TrackingEventTypeModel { Id = x.Id, EventType = x.EventType, Description = x.Description }).ToList();      
    }

    private async Task OnAddEntityAsync()
    {
        TrackingEvent trackingEventToAdd = TrackingEvent.Create(Guid.NewGuid(), _trackingEventToAdd.Name, _trackingEventToAdd.Description, _trackingEventToAdd.EventTypes.Select(x => TrackingEventType.Create(x.Id, x.EventType, x.Description)).ToArray());
        TrackingEvent newTrackingEvent = await _timeTrackingService.AddTrakingEventAsync(trackingEventToAdd, CancellationToken.None);
        _trackingEvents.Add(newTrackingEvent);
    }

    private async Task OnDeleteEntityAsync()
    {
        await _timeTrackingService.DeleteTrackingEventAsync(_trackingEventToDelete.Id, CancellationToken.None);
        _trackingEvents.Remove(_trackingEventToDelete);
        _trackingEventToDelete = null;
    }
}