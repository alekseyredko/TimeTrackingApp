@using Infrastructure.Models
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Commands.TrackingEvents;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEventTypes;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEvents;
@using TimeTrackingApp.Models;
@using MediatR;
<h4>TrackingEventComponent</h4>

<TrackingEventListComponent 
    @bind-TrackingEvents=TrackingEvents
    @bind-Entity="_trackingEventToDelete"
    EntityDeleted="OnDeleteEntityAsync" />

<AddTrackingEventComponent 
    @bind-TrackingEvent="_trackingEventToAdd"
    @bind-TrackingEventTypes="TrackingEventTypes"
    TrackingEventAdded="OnAddEntityAsync" />

@code {
    private TrackingEventDto _trackingEventToDelete;
    private AddTrackingEventModel _trackingEventToAdd = new AddTrackingEventModel();    

    [Inject]
    private IMediator _mediator { get; set; }

    [CascadingParameter(Name = "TrackingEvents")]
    protected List<TrackingEventDto> TrackingEvents { get; set; }

    [CascadingParameter(Name = "TrackingEventTypes")]
    protected List<TrackingEventTypeDto> TrackingEventTypes { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    private async Task OnAddEntityAsync()
    {
        CreateTrackingEventCommand createTrackingEventCommand = new CreateTrackingEventCommand
        {
            Id = Guid.NewGuid(),
            Name = _trackingEventToAdd.Name,
            Description = _trackingEventToAdd.Description,
            TrackingEventTypes = _trackingEventToAdd.EventTypes.Select(x => new TrackingEventTypeDto { Id = x.Id, EventType = x.EventType, Description = x.Description }).ToList()
        };

        TrackingEventDto createdTrackingEvent = await _mediator.Send<TrackingEventDto>(createTrackingEventCommand, CancellationToken.None);
        TrackingEvents.Add(createdTrackingEvent);        

        await OnStateHasChanged.InvokeAsync();
    }

    private async Task OnDeleteEntityAsync()
    {
        DeleteTrackingEventCommand deleteTrackingEventCommand = new DeleteTrackingEventCommand { Id = _trackingEventToDelete.Id };
        await _mediator.Send(deleteTrackingEventCommand, CancellationToken.None);
        TrackingEvents.Remove(_trackingEventToDelete);

        await OnStateHasChanged.InvokeAsync();
    }
}