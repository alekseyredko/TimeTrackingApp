@using Infrastructure.Models
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEvents;
@using TimeTrackingApp.Models;
@using MediatR;
<h4>TrackingEventComponent</h4>

<TrackingEventListComponent 
    @bind-TrackingEvents=_trackingEvents 
    @bind-Entity="_trackingEventToDelete"
    EntityDeleted="OnDeleteEntityAsync" />

<AddTrackingEventComponent 
    @bind-TrackingEvent="_trackingEventToAdd" 
    @bind-TrackingEventTypes="_trackingEventTypes"
    TrackingEventAdded="OnAddEntityAsync" />

@code {
    private List<TrackingEventResponse> _trackingEvents;
    private List<TrackingEventTypeModel> _trackingEventTypes;
    private TrackingEventResponse _trackingEventToDelete;
    private AddTrackingEventModel _trackingEventToAdd = new AddTrackingEventModel();

    [Inject]
    private IMediator _mediator { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _trackingEvents = (await _mediator.Send<IReadOnlyCollection<TrackingEventResponse>>(new TrackingEventsQuery(), CancellationToken.None)).ToList();
            StateHasChanged();
        }
    }

    private async Task OnAddEntityAsync()
    {        
    }

    private async Task OnDeleteEntityAsync()
    {        
    }
}