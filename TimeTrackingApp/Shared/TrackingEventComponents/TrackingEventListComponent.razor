@using Infrastructure.Models
@using TimeTrackingApp.Domain.Entities;

@if (TrackingEvents == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <div class="accordion" id="trackingEvents">
        @for (int i = 0; i < TrackingEvents.Count; i++)
        {
            int trackingEventTypeNumber = i;
            <div class="accordion-item" @key="TrackingEvents[i]">
                <h2 class="accordion-header" id="@($"heading{i}")">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@($"collapse{i}")" aria-expanded="true" aria-controls="@($"collapse{i}")">
                        @TrackingEvents[i].Description
                    </button>
                </h2>
                <div id="@($"collapse{i}")" class="accordion-collapse collapse" aria-labelledby="@($"heading{i}")" data-bs-parent="#trackingEvents">
                    <div class="accordion-body">
                        <div class="row">
                            <button class="btn btn-danger col" @onclick="async e => await OnDeleteAsync(TrackingEvents[trackingEventTypeNumber])">Delete</button>
                        </div>                       
                    </div>
                </div>
            </div>
        }
    </div>    
}

@code {
    private string _eventDescription;

    [Parameter]
    public List<TrackingEventDto> TrackingEvents { get; set; }

    [Parameter]
    public TrackingEventDto Entity { get; set; }

    [Parameter]
    public EventCallback<List<TrackingEventDto>> TrackingEventsChanged { get; set; }

    [Parameter]
    public EventCallback<TrackingEventDto> EntityChanged { get; set; }

    [Parameter]
    public EventCallback EntityDeleted { get; set; }
   
    private async Task OnDeleteAsync(TrackingEventDto trackingEvent)
    {
        await EntityChanged.InvokeAsync(trackingEvent);
        await EntityDeleted.InvokeAsync();
    }
}
