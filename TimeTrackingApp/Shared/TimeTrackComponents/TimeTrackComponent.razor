@using MediatR;
@using TimeTrackingApp.Domain.Entities;
@using TimeTrackingApp.Infrastructure.Models;

<h4>TimeTrackComponent</h4>

<TimeComponent @bind-ShowTrackTime="showTrackTime"/>

<ListComponent 
    @bind-Items="TimeTracks"
    @bind-Item="selectedTimeTrack"
    ItemToDeleteSelected="OnDeleteEntityAsync">
    <ItemHeader>
      
    </ItemHeader>
    <ItemContent>
        <div class="container">
            <p class="row">@context.StartTrackTime</p>
            <p class="row">@context.EndTrackTime</p>
            <p class="row">@context.Duration</p>
        </div>
    </ItemContent>
</ListComponent>

@if (showTrackTime)
{
    <button class="btn btn-primary" @onclick="OnStopTimeTrackAsync">Stop</button>    
}
else
{
    <AddTimeTrackComponent 
        @bind-TrackingEventId="trackingEventId"
        @bind-TrackingEvents="TrackingEvents"
        TimeTrackAdded="OnAddEntityAsync" />
}

@code {
    private bool showTrackTime;    

    private Guid trackingEventId;

    private TimeTrackDto selectedTimeTrack;    

    [Inject]
    private IMediator _mediator { get; set; }
    
    [CascadingParameter(Name = "TimeTracks")]
    protected List<TimeTrackDto> TimeTracks { get; set; }

    [CascadingParameter(Name = "TrackingEvents")]
    protected List<TrackingEventDto> TrackingEvents { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }
   
    private async Task OnAddEntityAsync()
    {    
        showTrackTime = true;
    }

    private async Task OnDeleteEntityAsync()
    {        
        TimeTracks.Remove(selectedTimeTrack);

        await OnStateHasChanged.InvokeAsync();
    }

    private async Task OnStopTimeTrackAsync()
    {              
        showTrackTime = false;
    }
}
