@using TimeTrackingApp.Core.Services.Interfaces;
@using TimeTrackingApp.Domain.Entities;

<h4>TimeTrackComponent</h4>

<TimeComponent @bind-ShowTrackTime="showTrackTime"/>

<ListComponent
    @bind-Items="timeTracks"
    @bind-Item="selectedTimeTrack"
    ItemToDeleteSelected="OnDeleteEntityAsync">
    <ItemHeader>
        @context.TrackingEvent.Description
    </ItemHeader>
    <ItemContent>
        <div class="container">
            <p class="row">@context.StartTrackTime</p>
            <p class="row">@context.EndTrackTime</p>
            <p class="row">@context.Duration</p>
        </div>
    </ItemContent>
</ListComponent>

@if (showTrackTime)
{
    <button class="btn btn-primary" @onclick="OnStopTimeTrackAsync">Stop</button>    
}
else
{
    <AddTimeTrackComponent 
        @bind-TrackingEventId="trackingEventId"
        @bind-TrackingEvents="trackingEvents"
        TimeTrackAdded="OnAddEntityAsync" />
}

@code {
    private bool showTrackTime;

    private List<TimeTrack> timeTracks;

    private Guid trackingEventId;

    private TimeTrack selectedTimeTrack;

    private List<TrackingEvent> trackingEvents;

    [Inject]
    private ITimeTrackingService TimeTrackingService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        timeTracks = await TimeTrackingService.GetFinishedTimeTracksAsync(CancellationToken.None);
        trackingEvents = await TimeTrackingService.GetTrackingEventsAsync(CancellationToken.None);
        await base.OnInitializedAsync();
    }  

    private async Task OnAddEntityAsync()
    {
        TimeTrack newTimeTrack = await TimeTrackingService.StartTimeTrackAsync(trackingEventId, DateTimeOffset.Now, CancellationToken.None);
        timeTracks.Add(newTimeTrack);

        showTrackTime = true;
    }

    private async Task OnDeleteEntityAsync()
    {
        await TimeTrackingService.DeleteTimeTrackAsync(selectedTimeTrack.Id, CancellationToken.None);
        timeTracks.Remove(selectedTimeTrack);
    }

    private async Task OnStopTimeTrackAsync()
    {
        TimeTrack stoppedTimeTrack = await TimeTrackingService.StopCurrentTimeTrackAsync(DateTimeOffset.Now, CancellationToken.None);
        TimeTrack foundTimeTrack = timeTracks.First(x => x.Id == stoppedTimeTrack.Id);
        foundTimeTrack = stoppedTimeTrack;

        showTrackTime = false;
    }
}
