@using TimeTrackingApp.Domain.Entities;
@using System.Timers;
@implements IDisposable;

<p>@_elapsed</p>
<p>@ShowTrackTime</p>

@code {
    private Timer _timer = new Timer(10);
    private TimeSpan _elapsed;    

    private bool _show;      

    [Parameter]
    public bool ShowTrackTime
    {
        get { return _show; }
        set 
        { 
            _show = value;
            StartOrStopTimer(_show);
        }
    }

    [Parameter]
    public EventCallback<bool> ShowTrackTimeChanged { get; set; }

    private void OnTimerCallback(object sender, ElapsedEventArgs e)
    {
        _ = InvokeAsync(() =>
        {
            _elapsed = _elapsed.Add(TimeSpan.FromMilliseconds(10));
            StateHasChanged();
        });
    }

    public void StartOrStopTimer(bool start)
    {             
        if (start)
        {
            _timer.Elapsed += OnTimerCallback;
            _timer.Start();
        }
        else
        {
            _timer.Stop();
            _elapsed = new TimeSpan();
            _timer.Elapsed -= OnTimerCallback;
            StateHasChanged();
        }        
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}
