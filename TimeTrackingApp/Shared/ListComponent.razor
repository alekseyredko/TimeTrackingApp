@typeparam TItem

@if (Items == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
else
{
    <div class="accordion" id="{nameof(TItem)}">
        @for (int i = 0; i < Items.Count; i++)
        {            
            int trackingEventTypeNumber = i;
            <div class="accordion-item" @key="Items[trackingEventTypeNumber]">
                <h2 class="accordion-header" id="@($"heading{nameof(TItem)}{trackingEventTypeNumber}")">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@($"collapse{nameof(TItem)}{trackingEventTypeNumber}")" aria-expanded="true" aria-controls="@($"collapse{nameof(TItem)}{trackingEventTypeNumber}")">
                        @ItemHeader(Items[trackingEventTypeNumber])
                    </button>
                </h2>
                <div id="@($"collapse{nameof(TItem)}{trackingEventTypeNumber}")" class="accordion-collapse collapse" aria-labelledby="@($"heading{nameof(TItem)}{trackingEventTypeNumber}")" data-bs-parent="#@($"{nameof(TItem)}")">
                    <div class="accordion-body">
                        <div class="row">
                            @ItemContent(Items[trackingEventTypeNumber])
                        </div>
                        @*<div class="row">
                            <button class="btn btn-danger col" @onclick="async e => await OnDeleteAsync(Items[trackingEventTypeNumber])">Delete</button>
                        </div>*@
                    </div>
                </div>
            </div>
        }
    </div>   
}

@code {
    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [Parameter]
    public EventCallback<TItem> ItemChanged { get; set; }

    [Parameter]
    public EventCallback<List<TItem>> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback ItemToDeleteSelected { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemContent { get; set; }

    private async Task OnDeleteAsync(TItem item)
    {       
        await ItemChanged.InvokeAsync(item);
        await ItemToDeleteSelected.InvokeAsync();
    }
}
