@page "/dashboard"
@using MediatR;
@using TimeTrackingApp.Infrastructure.Models;
@using TimeTrackingApp.Infrastructure.Queries.TimeTracks;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEventTypes;
@using TimeTrackingApp.Infrastructure.Queries.TrackingEvents;
@using TimeTrackingApp.Shared.TimeTrackComponents
@using TimeTrackingApp.Shared.TrackingEventComponents
@using TimeTrackingApp.Shared.TrackingEventTypeComponents

<PageTitle>Dashboard</PageTitle>

<div class="container-fill d-flex justify-content-center flex-wrap gap-4">
    <div class="rounded border flex-fill p-2">
        <TimeTrackComponent 
            @bind-TimeTracks="_timeTracks"
            @bind-TrackingEvents="_trackingEvents"/>
    </div>
    <div class="rounded border flex-fill p-2">
        <TrackingEventComponent 
            @bind-TrackingEvents="_trackingEvents"
            @bind-TrackingEventTypes="_trackingEventTypes"/>
    </div>
    <div class="rounded border flex-fill p-2">
        <TrackingEventTypeComponent 
            @bind-TrackingEventTypes="_trackingEventTypes"/>
    </div>
</div>


@code {

    private List<TimeTrackDto> _timeTracks;

    private List<TrackingEventDto> _trackingEvents;

    private List<TrackingEventTypeDto> _trackingEventTypes;

    [Inject]
    IMediator _mediator { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _timeTracks = (await _mediator.Send<IReadOnlyCollection<TimeTrackDto>>(new TimeTracksQuery(), CancellationToken.None)).ToList();
            _trackingEvents = (await _mediator.Send<IReadOnlyCollection<TrackingEventDto>>(new TrackingEventsQuery(), CancellationToken.None)).ToList();
            _trackingEventTypes = (await _mediator.Send<IReadOnlyCollection<TrackingEventTypeDto>>(new TrackingEventTypesQuery(), CancellationToken.None)).ToList();
            StateHasChanged();
        }
    }   
}
